### YamlMime:ManagedReference
items:
- uid: CommonLib.LDAPUtils
  commentId: T:CommonLib.LDAPUtils
  id: LDAPUtils
  parent: CommonLib
  children:
  - CommonLib.LDAPUtils.DoRangedRetrieval(System.String,System.String)
  - CommonLib.LDAPUtils.GetDomainNameFromSid(System.String)
  - CommonLib.LDAPUtils.Instance
  - CommonLib.LDAPUtils.LookupGuidType(System.String,System.String)
  - CommonLib.LDAPUtils.LookupSidType(System.String,System.String)
  - CommonLib.LDAPUtils.QueryLDAP(System.String,System.DirectoryServices.Protocols.SearchScope,System.String[],System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)
  - CommonLib.LDAPUtils.ResolveAccountName(System.String,System.String)
  - CommonLib.LDAPUtils.ResolveDistinguishedName(System.String)
  - CommonLib.LDAPUtils.ResolveHostToSid(System.String,System.String)
  - CommonLib.LDAPUtils.ResolveIDAndType(System.String,System.String)
  - CommonLib.LDAPUtils.UpdateLDAPConfig(CommonLib.LDAPConfig)
  langs:
  - csharp
  - vb
  name: LDAPUtils
  nameWithType: LDAPUtils
  fullName: CommonLib.LDAPUtils
  type: Class
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: LDAPUtils
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 18
  assemblies:
  - CommonLib
  namespace: CommonLib
  syntax:
    content: public class LDAPUtils
    content.vb: Public Class LDAPUtils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CommonLib.LDAPUtils.UpdateLDAPConfig(CommonLib.LDAPConfig)
  commentId: M:CommonLib.LDAPUtils.UpdateLDAPConfig(CommonLib.LDAPConfig)
  id: UpdateLDAPConfig(CommonLib.LDAPConfig)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: UpdateLDAPConfig(LDAPConfig)
  nameWithType: LDAPUtils.UpdateLDAPConfig(LDAPConfig)
  fullName: CommonLib.LDAPUtils.UpdateLDAPConfig(CommonLib.LDAPConfig)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: UpdateLDAPConfig
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 47
  assemblies:
  - CommonLib
  namespace: CommonLib
  syntax:
    content: public static void UpdateLDAPConfig(LDAPConfig config)
    parameters:
    - id: config
      type: CommonLib.LDAPConfig
    content.vb: Public Shared Sub UpdateLDAPConfig(config As LDAPConfig)
  overload: CommonLib.LDAPUtils.UpdateLDAPConfig*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CommonLib.LDAPUtils.Instance
  commentId: P:CommonLib.LDAPUtils.Instance
  id: Instance
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: LDAPUtils.Instance
  fullName: CommonLib.LDAPUtils.Instance
  type: Property
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: Instance
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 52
  assemblies:
  - CommonLib
  namespace: CommonLib
  syntax:
    content: public static LDAPUtils Instance { get; }
    parameters: []
    return:
      type: CommonLib.LDAPUtils
    content.vb: Public Shared ReadOnly Property Instance As LDAPUtils
  overload: CommonLib.LDAPUtils.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CommonLib.LDAPUtils.ResolveIDAndType(System.String,System.String)
  commentId: M:CommonLib.LDAPUtils.ResolveIDAndType(System.String,System.String)
  id: ResolveIDAndType(System.String,System.String)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: ResolveIDAndType(String, String)
  nameWithType: LDAPUtils.ResolveIDAndType(String, String)
  fullName: CommonLib.LDAPUtils.ResolveIDAndType(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: ResolveIDAndType
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 64
  assemblies:
  - CommonLib
  namespace: CommonLib
  syntax:
    content: public static TypedPrincipal ResolveIDAndType(string id, string domain)
    parameters:
    - id: id
      type: System.String
    - id: domain
      type: System.String
    return:
      type: CommonLib.Output.TypedPrincipal
    content.vb: Public Shared Function ResolveIDAndType(id As String, domain As String) As TypedPrincipal
  overload: CommonLib.LDAPUtils.ResolveIDAndType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CommonLib.LDAPUtils.LookupSidType(System.String,System.String)
  commentId: M:CommonLib.LDAPUtils.LookupSidType(System.String,System.String)
  id: LookupSidType(System.String,System.String)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: LookupSidType(String, String)
  nameWithType: LDAPUtils.LookupSidType(String, String)
  fullName: CommonLib.LDAPUtils.LookupSidType(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: LookupSidType
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 85
  assemblies:
  - CommonLib
  namespace: CommonLib
  syntax:
    content: public static Label LookupSidType(string sid, string domain)
    parameters:
    - id: sid
      type: System.String
    - id: domain
      type: System.String
    return:
      type: CommonLib.Enums.Label
    content.vb: Public Shared Function LookupSidType(sid As String, domain As String) As Label
  overload: CommonLib.LDAPUtils.LookupSidType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CommonLib.LDAPUtils.LookupGuidType(System.String,System.String)
  commentId: M:CommonLib.LDAPUtils.LookupGuidType(System.String,System.String)
  id: LookupGuidType(System.String,System.String)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: LookupGuidType(String, String)
  nameWithType: LDAPUtils.LookupGuidType(String, String)
  fullName: CommonLib.LDAPUtils.LookupGuidType(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: LookupGuidType
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 103
  assemblies:
  - CommonLib
  namespace: CommonLib
  syntax:
    content: public static Label LookupGuidType(string guid, string domain)
    parameters:
    - id: guid
      type: System.String
    - id: domain
      type: System.String
    return:
      type: CommonLib.Enums.Label
    content.vb: Public Shared Function LookupGuidType(guid As String, domain As String) As Label
  overload: CommonLib.LDAPUtils.LookupGuidType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CommonLib.LDAPUtils.GetDomainNameFromSid(System.String)
  commentId: M:CommonLib.LDAPUtils.GetDomainNameFromSid(System.String)
  id: GetDomainNameFromSid(System.String)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: GetDomainNameFromSid(String)
  nameWithType: LDAPUtils.GetDomainNameFromSid(String)
  fullName: CommonLib.LDAPUtils.GetDomainNameFromSid(System.String)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: GetDomainNameFromSid
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 121
  assemblies:
  - CommonLib
  namespace: CommonLib
  syntax:
    content: public static string GetDomainNameFromSid(string sid)
    parameters:
    - id: sid
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetDomainNameFromSid(sid As String) As String
  overload: CommonLib.LDAPUtils.GetDomainNameFromSid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CommonLib.LDAPUtils.DoRangedRetrieval(System.String,System.String)
  commentId: M:CommonLib.LDAPUtils.DoRangedRetrieval(System.String,System.String)
  id: DoRangedRetrieval(System.String,System.String)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: DoRangedRetrieval(String, String)
  nameWithType: LDAPUtils.DoRangedRetrieval(String, String)
  fullName: CommonLib.LDAPUtils.DoRangedRetrieval(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: DoRangedRetrieval
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 189
  assemblies:
  - CommonLib
  namespace: CommonLib
  summary: "\nPerforms Attribute Ranged Retrieval\nhttps://docs.microsoft.com/en-us/windows/win32/adsi/attribute-range-retrieval\nThe function self-determines the range and internally handles the maximum step allowed by the server\n"
  example: []
  syntax:
    content: public static IEnumerable<string> DoRangedRetrieval(string distinguishedName, string attributeName)
    parameters:
    - id: distinguishedName
      type: System.String
      description: ''
    - id: attributeName
      type: System.String
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: ''
    content.vb: Public Shared Function DoRangedRetrieval(distinguishedName As String, attributeName As String) As IEnumerable(Of String)
  overload: CommonLib.LDAPUtils.DoRangedRetrieval*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CommonLib.LDAPUtils.ResolveHostToSid(System.String,System.String)
  commentId: M:CommonLib.LDAPUtils.ResolveHostToSid(System.String,System.String)
  id: ResolveHostToSid(System.String,System.String)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: ResolveHostToSid(String, String)
  nameWithType: LDAPUtils.ResolveHostToSid(String, String)
  fullName: CommonLib.LDAPUtils.ResolveHostToSid(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: ResolveHostToSid
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 269
  assemblies:
  - CommonLib
  namespace: CommonLib
  summary: "\nTakes a host in most applicable forms from AD and attempts to resolve it into a SID.\n"
  example: []
  syntax:
    content: public static Task<string> ResolveHostToSid(string hostname, string domain)
    parameters:
    - id: hostname
      type: System.String
      description: ''
    - id: domain
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Shared Function ResolveHostToSid(hostname As String, domain As String) As Task(Of String)
  overload: CommonLib.LDAPUtils.ResolveHostToSid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CommonLib.LDAPUtils.ResolveAccountName(System.String,System.String)
  commentId: M:CommonLib.LDAPUtils.ResolveAccountName(System.String,System.String)
  id: ResolveAccountName(System.String,System.String)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: ResolveAccountName(String, String)
  nameWithType: LDAPUtils.ResolveAccountName(String, String)
  fullName: CommonLib.LDAPUtils.ResolveAccountName(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: ResolveAccountName
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 506
  assemblies:
  - CommonLib
  namespace: CommonLib
  summary: "\nAttempts to convert a bare account name (usually from session enumeration) to its corresponding ID and object type\n"
  example: []
  syntax:
    content: public static Task<TypedPrincipal> ResolveAccountName(string name, string domain)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: domain
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{CommonLib.Output.TypedPrincipal}
      description: ''
    content.vb: Public Shared Function ResolveAccountName(name As String, domain As String) As Task(Of TypedPrincipal)
  overload: CommonLib.LDAPUtils.ResolveAccountName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CommonLib.LDAPUtils.ResolveDistinguishedName(System.String)
  commentId: M:CommonLib.LDAPUtils.ResolveDistinguishedName(System.String)
  id: ResolveDistinguishedName(System.String)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: ResolveDistinguishedName(String)
  nameWithType: LDAPUtils.ResolveDistinguishedName(String)
  fullName: CommonLib.LDAPUtils.ResolveDistinguishedName(System.String)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: ResolveDistinguishedName
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 549
  assemblies:
  - CommonLib
  namespace: CommonLib
  summary: "\nAttempts to convert a distinguishedname to its corresponding ID and object type.\n"
  example: []
  syntax:
    content: public static Task<TypedPrincipal> ResolveDistinguishedName(string dn)
    parameters:
    - id: dn
      type: System.String
      description: DistinguishedName
    return:
      type: System.Threading.Tasks.Task{CommonLib.Output.TypedPrincipal}
      description: A <code>TypedPrincipal</code> object with the SID and Label
    content.vb: Public Shared Function ResolveDistinguishedName(dn As String) As Task(Of TypedPrincipal)
  overload: CommonLib.LDAPUtils.ResolveDistinguishedName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CommonLib.LDAPUtils.QueryLDAP(System.String,System.DirectoryServices.Protocols.SearchScope,System.String[],System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)
  commentId: M:CommonLib.LDAPUtils.QueryLDAP(System.String,System.DirectoryServices.Protocols.SearchScope,System.String[],System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)
  id: QueryLDAP(System.String,System.DirectoryServices.Protocols.SearchScope,System.String[],System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)
  parent: CommonLib.LDAPUtils
  langs:
  - csharp
  - vb
  name: QueryLDAP(String, SearchScope, String[], String, Boolean, Boolean, String, Boolean, Boolean)
  nameWithType: LDAPUtils.QueryLDAP(String, SearchScope, String[], String, Boolean, Boolean, String, Boolean, Boolean)
  fullName: CommonLib.LDAPUtils.QueryLDAP(System.String, System.DirectoryServices.Protocols.SearchScope, System.String[], System.String, System.Boolean, System.Boolean, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPUtils.cs
      branch: master
      repo: https://github.com/0x13d-git/SharpHoundCommon
    id: QueryLDAP
    path: ../src/CommonLib/LDAPUtils.cs
    startLine: 603
  assemblies:
  - CommonLib
  namespace: CommonLib
  summary: "\nPerforms an LDAP query using the parameters specified by the user.\n"
  example: []
  syntax:
    content: public static IEnumerable<SearchResultEntry> QueryLDAP(string ldapFilter, SearchScope scope, string[] props, string domainName = null, bool includeAcl = false, bool showDeleted = false, string adsPath = null, bool globalCatalog = false, bool skipCache = false)
    parameters:
    - id: ldapFilter
      type: System.String
      description: LDAP filter
    - id: scope
      type: System.DirectoryServices.Protocols.SearchScope
      description: SearchScope to query
    - id: props
      type: System.String[]
      description: LDAP properties to fetch for each object
    - id: domainName
      type: System.String
      description: Domain to query
    - id: includeAcl
      type: System.Boolean
      description: Include the DACL and Owner values in the NTSecurityDescriptor
    - id: showDeleted
      type: System.Boolean
      description: Include deleted objects
    - id: adsPath
      type: System.String
      description: ADS path to limit the query too
    - id: globalCatalog
      type: System.Boolean
      description: Use the global catalog instead of the regular LDAP server
    - id: skipCache
      type: System.Boolean
      description: Skip the connection cache and force a new connection. You must dispose of this connection yourself.
    return:
      type: System.Collections.Generic.IEnumerable{System.DirectoryServices.Protocols.SearchResultEntry}
      description: All LDAP search results matching the specified parameters
    content.vb: Public Shared Function QueryLDAP(ldapFilter As String, scope As SearchScope, props As String(), domainName As String = Nothing, includeAcl As Boolean = False, showDeleted As Boolean = False, adsPath As String = Nothing, globalCatalog As Boolean = False, skipCache As Boolean = False) As IEnumerable(Of SearchResultEntry)
  overload: CommonLib.LDAPUtils.QueryLDAP*
  nameWithType.vb: LDAPUtils.QueryLDAP(String, SearchScope, String(), String, Boolean, Boolean, String, Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CommonLib.LDAPUtils.QueryLDAP(System.String, System.DirectoryServices.Protocols.SearchScope, System.String(), System.String, System.Boolean, System.Boolean, System.String, System.Boolean, System.Boolean)
  name.vb: QueryLDAP(String, SearchScope, String(), String, Boolean, Boolean, String, Boolean, Boolean)
references:
- uid: CommonLib
  commentId: N:CommonLib
  name: CommonLib
  nameWithType: CommonLib
  fullName: CommonLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CommonLib.LDAPUtils.UpdateLDAPConfig*
  commentId: Overload:CommonLib.LDAPUtils.UpdateLDAPConfig
  name: UpdateLDAPConfig
  nameWithType: LDAPUtils.UpdateLDAPConfig
  fullName: CommonLib.LDAPUtils.UpdateLDAPConfig
- uid: CommonLib.LDAPConfig
  commentId: T:CommonLib.LDAPConfig
  parent: CommonLib
  name: LDAPConfig
  nameWithType: LDAPConfig
  fullName: CommonLib.LDAPConfig
- uid: CommonLib.LDAPUtils.Instance*
  commentId: Overload:CommonLib.LDAPUtils.Instance
  name: Instance
  nameWithType: LDAPUtils.Instance
  fullName: CommonLib.LDAPUtils.Instance
- uid: CommonLib.LDAPUtils
  commentId: T:CommonLib.LDAPUtils
  parent: CommonLib
  name: LDAPUtils
  nameWithType: LDAPUtils
  fullName: CommonLib.LDAPUtils
- uid: CommonLib.LDAPUtils.ResolveIDAndType*
  commentId: Overload:CommonLib.LDAPUtils.ResolveIDAndType
  name: ResolveIDAndType
  nameWithType: LDAPUtils.ResolveIDAndType
  fullName: CommonLib.LDAPUtils.ResolveIDAndType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CommonLib.Output.TypedPrincipal
  commentId: T:CommonLib.Output.TypedPrincipal
  parent: CommonLib.Output
  name: TypedPrincipal
  nameWithType: TypedPrincipal
  fullName: CommonLib.Output.TypedPrincipal
- uid: CommonLib.Output
  commentId: N:CommonLib.Output
  name: CommonLib.Output
  nameWithType: CommonLib.Output
  fullName: CommonLib.Output
- uid: CommonLib.LDAPUtils.LookupSidType*
  commentId: Overload:CommonLib.LDAPUtils.LookupSidType
  name: LookupSidType
  nameWithType: LDAPUtils.LookupSidType
  fullName: CommonLib.LDAPUtils.LookupSidType
- uid: CommonLib.Enums.Label
  commentId: T:CommonLib.Enums.Label
  parent: CommonLib.Enums
  name: Label
  nameWithType: Label
  fullName: CommonLib.Enums.Label
- uid: CommonLib.Enums
  commentId: N:CommonLib.Enums
  name: CommonLib.Enums
  nameWithType: CommonLib.Enums
  fullName: CommonLib.Enums
- uid: CommonLib.LDAPUtils.LookupGuidType*
  commentId: Overload:CommonLib.LDAPUtils.LookupGuidType
  name: LookupGuidType
  nameWithType: LDAPUtils.LookupGuidType
  fullName: CommonLib.LDAPUtils.LookupGuidType
- uid: CommonLib.LDAPUtils.GetDomainNameFromSid*
  commentId: Overload:CommonLib.LDAPUtils.GetDomainNameFromSid
  name: GetDomainNameFromSid
  nameWithType: LDAPUtils.GetDomainNameFromSid
  fullName: CommonLib.LDAPUtils.GetDomainNameFromSid
- uid: CommonLib.LDAPUtils.DoRangedRetrieval*
  commentId: Overload:CommonLib.LDAPUtils.DoRangedRetrieval
  name: DoRangedRetrieval
  nameWithType: LDAPUtils.DoRangedRetrieval
  fullName: CommonLib.LDAPUtils.DoRangedRetrieval
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CommonLib.LDAPUtils.ResolveHostToSid*
  commentId: Overload:CommonLib.LDAPUtils.ResolveHostToSid
  name: ResolveHostToSid
  nameWithType: LDAPUtils.ResolveHostToSid
  fullName: CommonLib.LDAPUtils.ResolveHostToSid
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: CommonLib.LDAPUtils.ResolveAccountName*
  commentId: Overload:CommonLib.LDAPUtils.ResolveAccountName
  name: ResolveAccountName
  nameWithType: LDAPUtils.ResolveAccountName
  fullName: CommonLib.LDAPUtils.ResolveAccountName
- uid: System.Threading.Tasks.Task{CommonLib.Output.TypedPrincipal}
  commentId: T:System.Threading.Tasks.Task{CommonLib.Output.TypedPrincipal}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TypedPrincipal>
  nameWithType: Task<TypedPrincipal>
  fullName: System.Threading.Tasks.Task<CommonLib.Output.TypedPrincipal>
  nameWithType.vb: Task(Of TypedPrincipal)
  fullName.vb: System.Threading.Tasks.Task(Of CommonLib.Output.TypedPrincipal)
  name.vb: Task(Of TypedPrincipal)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CommonLib.Output.TypedPrincipal
    name: TypedPrincipal
    nameWithType: TypedPrincipal
    fullName: CommonLib.Output.TypedPrincipal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CommonLib.Output.TypedPrincipal
    name: TypedPrincipal
    nameWithType: TypedPrincipal
    fullName: CommonLib.Output.TypedPrincipal
  - name: )
    nameWithType: )
    fullName: )
- uid: CommonLib.LDAPUtils.ResolveDistinguishedName*
  commentId: Overload:CommonLib.LDAPUtils.ResolveDistinguishedName
  name: ResolveDistinguishedName
  nameWithType: LDAPUtils.ResolveDistinguishedName
  fullName: CommonLib.LDAPUtils.ResolveDistinguishedName
- uid: CommonLib.LDAPUtils.QueryLDAP*
  commentId: Overload:CommonLib.LDAPUtils.QueryLDAP
  name: QueryLDAP
  nameWithType: LDAPUtils.QueryLDAP
  fullName: CommonLib.LDAPUtils.QueryLDAP
- uid: System.DirectoryServices.Protocols.SearchScope
  commentId: T:System.DirectoryServices.Protocols.SearchScope
  parent: System.DirectoryServices.Protocols
  isExternal: true
  name: SearchScope
  nameWithType: SearchScope
  fullName: System.DirectoryServices.Protocols.SearchScope
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.DirectoryServices.Protocols.SearchResultEntry}
  commentId: T:System.Collections.Generic.IEnumerable{System.DirectoryServices.Protocols.SearchResultEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SearchResultEntry>
  nameWithType: IEnumerable<SearchResultEntry>
  fullName: System.Collections.Generic.IEnumerable<System.DirectoryServices.Protocols.SearchResultEntry>
  nameWithType.vb: IEnumerable(Of SearchResultEntry)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.DirectoryServices.Protocols.SearchResultEntry)
  name.vb: IEnumerable(Of SearchResultEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DirectoryServices.Protocols.SearchResultEntry
    name: SearchResultEntry
    nameWithType: SearchResultEntry
    fullName: System.DirectoryServices.Protocols.SearchResultEntry
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DirectoryServices.Protocols.SearchResultEntry
    name: SearchResultEntry
    nameWithType: SearchResultEntry
    fullName: System.DirectoryServices.Protocols.SearchResultEntry
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DirectoryServices.Protocols
  commentId: N:System.DirectoryServices.Protocols
  isExternal: true
  name: System.DirectoryServices.Protocols
  nameWithType: System.DirectoryServices.Protocols
  fullName: System.DirectoryServices.Protocols
